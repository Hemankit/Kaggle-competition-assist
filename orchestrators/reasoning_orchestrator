from crewai import Crew, Task
from routing.intent_router import parse_user_intent
from routing.capability_scoring import find_agents_by_subintent
from routing.registry import AUTOGEN_AGENT_REGISTRY
from orchestrators.orchestrator_base import BaseOrchestratorUtils
from base.base_agent import BaseAgent


class MultiAgentReasoningOrchestrator:
    def __init__(self):
        self.utils = BaseOrchestratorUtils()
        self.agent_registry = AUTOGEN_AGENT_REGISTRY

    def _instantiate_agent(self, agent_name: str) -> BaseAgent:
        entry = self.agent_registry.get(agent_name)
        if not entry:
            raise ValueError(f"Agent '{agent_name}' not found in AUTOGEN_AGENT_REGISTRY.")
        
        agent_class = entry.get("agent_class")
        if not issubclass(agent_class, BaseAgent):
            raise TypeError(f"Agent '{agent_name}' does not implement BaseAgent.")
        
        return agent_class()

    def route_and_create_crew(self, user_query: str) -> dict:
        parsed_intent = parse_user_intent(user_query)

        reasoning_style = parsed_intent.get("reasoning_style")
        subintents = parsed_intent.get("sub_intents", [])
        matched_agents = set()

        for subintent in subintents:
            matches = find_agents_by_subintent(
                subintent=subintent,
                reasoning_style=reasoning_style,
                registry=self.agent_registry
            )
            for match in matches:
                matched_agents.add(match["agent"])

        if not matched_agents:
            return {"error": "No agents matched. Please rephrase your query."}

        agent_objs = []
        tasks = []

        for agent_name in matched_agents:
            agent_instance = self._instantiate_agent(agent_name)
            crewai_agent = agent_instance.as_crewai_agent()
            task = Task(
                description=f"Contribute to solving: {user_query}",
                expected_output="Detailed response",
                agent=crewai_agent
            )
            agent_objs.append(crewai_agent)
            tasks.append(task)

        crew = Crew(agents=agent_objs, tasks=tasks)
        final_output = crew.run()

        return {
            "structured_intent": parsed_intent,
            "selected_agents": list(matched_agents),
            "final_response": final_output
        }
